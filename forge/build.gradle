plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle'
    id 'org.spongepowered.mixin'

    id "me.modmuss50.mod-publish-plugin"
}

def ENV = System.getenv()

base {
    archivesName = "${mod_id}-forge"
}
mixin {
    add(sourceSets.main, "${mod_id}.refmap.json")

    config("${mod_id}.mixins.json")
}

minecraft {
    mappings channel: 'official', version: minecraft_version

    copyIdeResources = true //Calls processResources when in dev

    // Automatically enable forge AccessTransformers if the file exists
    // This location is hardcoded in Forge and can not be changed.
    // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":common")
    annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")

    implementation group: 'org.kohsuke.metainf-services', name: 'metainf-services', version: '1.9'
    annotationProcessor group: 'org.kohsuke.metainf-services', name: 'metainf-services', version: '1.9'
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId "${mod_id}-${project.name}"
            from components.java
            fg.component(it)
        }
    }
    repositories {
        maven {
            name = "BrazierModdingRepository"
            url = uri("https://maven.brazier-modding.net/snapshots")
            credentials {
                username = ENV.MAVEN_UPLOAD_USERNAME
                password = ENV.MAVEN_UPLOAD_PASSWORD
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}

publishMods {
    file = jar.archiveFile

    if(new File("../", "Changelog.md").exists())
        changelog = new File("./../", "Changelog.md").text
    else changelog = ""

    type = STABLE
    modLoaders.add("forge")

    displayName = "$project.ext.mod_name - Forge ${minecraft_version} - v${simple_version}"

    curseforge {
        projectId = curse_project
        projectSlug = curse_slug // Required for discord webhook
        accessToken = ENV.CURSE_PAT
        minecraftVersions.add("1.20.1")
    }

    modrinth {
        projectId = modrinth_project
        accessToken = ENV.MODRINTH_PAT
        minecraftVersions.add("1.20.1")
    }
}